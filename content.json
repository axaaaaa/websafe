{"pages":[],"posts":[{"title":"","text":"Docker三步走1.生成映像 2.镜像生成容器 3.运行容器（docker run） 可以把映像成对象，对象生成方法等。 Docker 介绍 Docker就是一个虚拟机，里面的应用程序与主机相互隔离。 应用程序称为容器，容器无需依赖机上安装的内容。 可以共享容器，开发人员在本地编写代码，使用 Docker 容器与同事共享他们的工作。 可以在本地笔记本电脑、数据中心的物理机或虚拟机、云提供商或混合环境中运行。 Docker 体系结构 客户端&amp;服务器 Docker 客户端与 Docker 守护程序通信，后者负责构建、运行和分发 Docker 容器的繁重工作。 Docker 客户端和守护程序可以在同一系统上运行，也可以将 Docker 客户端连接到远程 Docker 守护程序。Docker 客户端和守护程序使用 REST API、UNIX 套接字或网络接口进行通信。另一个 Docker 客户端是 Docker Compose，它允许您使用由一组容器组成的应用程序。 Docker 守护程序 侦听 Docker API 请求并管理 Docker 对象：映像、容器、网络和卷。 守护程序还可以与其他守护程序通信以管理 Docker 服务。dockerd Docker 客户端Docker 用户与 Docker 交互的主要方式。客户端将命令发送到 ，后者会执行这些命令。该命令使用 Docker API。Docker 客户端可以与多个守护程序进行通信。docker``docker run``dockerd``docker Docker Desktop易于Mac 或 Windows 环境的安装应用程序，Docker Desktop 包括 Docker 守护程序 （）、Docker 客户端 （）、Docker Compose、Docker Content Trust、Kubernetes 和 Credential Helper。有关详细信息，请参阅 Docker Desktop。dockerd``docker Docker Hub 存储官方映像和私人的映像的地方 拉取映像命令1docker pull 推送映像命令1docker push Docker 对象映像映像是一个只读模板，其中包含有关创建 Docker 容器的说明。通常，一个映像基于另一个映像，并具有一些额外的自定义。例如，您可以构建一个基于该映像的映像，但会安装 Apache Web 服务器和应用程序，以及使应用程序运行所需的配置详细信息。ubuntu 您可以创建自己的映像，也可以只使用其他人创建并在注册表中发布的映像。若要生成自己的映像，请使用简单的语法创建一个 Dockerfile，用于定义创建映像并运行映像所需的步骤。Dockerfile 中的每条指令都会在映像中创建一个层。更改 Dockerfile 并重新生成映像时，只会重新生成已更改的层。与其他虚拟化技术相比，这是使映像如此轻巧、小巧和快速的部分原因。 容器容器是映像的可运行实例。您可以使用 Docker API 或 CLI 创建、启动、停止、移动或删除容器。可以将容器连接到一个或多个网络，将存储附加到该网络，甚至可以根据其当前状态创建新映像。 默认情况下，容器与其他容器及其主机相对隔离。您可以控制容器的网络、存储或其他底层子系统与其他容器或主机的隔离程度。 容器由其映像以及您在创建或启动容器时提供给它的任何配置选项定义。删除容器后，未存储在持久性存储中的任何对其状态所做的任何更改都将消失。 docker run 运行容器以交互方式附加到本地命令行会话，然后运行 。ubuntu``/bin/bash1$ docker run -i -t ubuntu /bin/bash 运行此命令时，将发生以下情况（假设您使用的是默认注册表配置）： 如果本地没有映像，Docker 会从配置的注册表中提取该映像，就像手动运行一样。ubuntu``docker pull ubuntu Docker 会创建一个新容器，就像手动运行命令一样。docker container create Docker 将读写文件系统分配给容器，作为其最后一层。这允许正在运行的容器在其本地文件系统中创建或修改文件和目录。 Docker 创建一个网络接口以将容器连接到默认网络，因为您没有指定任何网络选项。这包括为容器分配 IP 地址。默认情况下，容器可以使用主机的网络连接连接到外部网络。 Docker 启动容器并执行 。由于容器以交互方式运行并附加到终端（由于 and 标志），因此您可以在将输出记录到终端时使用键盘提供输入。/bin/bash``-i``-t 键入以终止命令时，容器将停止但不会被删除。您可以再次启动它或删除它。exit``/bin/bash 开始教程命令提示符或 bash运行命令： 1$ docker run -d -p 80:80 docker/getting-started -d 在后台运行容器 -p 80:80 将主机端口 80 映射到容器中的端口 80 docker/getting-started 要使用镜像 简洁写法： 1$ docker run -dp 80:80 docker/getting-started Docker 仪表板快速查看计算机上运行的容器。Docker Dashboard 适用于 Mac 和 Windows。它使您可以快速访问容器日志，让您在容器内获得一个shell，并允许您轻松管理容器生命周期（停止，删除等）。 操作手册 Docker 桌面手册 映像映像包含容器的文件系统，它包含运行应用程序所需的一切 、配置、脚本、二进制文件等。 映像还包含其他配置，如环境变量、要运行的默认命令和其他元数据。 映像生成容器 容器 容器是计算机上的沙盒进程，与主机上其他进程隔离。 这种隔离利用了内核命名空间和 cgroups，这些功能已经在 Linux 中存在了很长时间。 是映像可运行实例。您以使用 DockerAPI 或 CLI 创建、启动、停止、移动或删除容器。 可以在本地机器、虚拟机上运行或部署到云中。 可移植（可以在任何操作系统上运行） 容器彼此隔离，并运行自己的软件、二进制文件和配置 示例使用一个在 Node.js 中运行的待办事项管理器，界面 获取应用程序先将待办事项管理器程序源代码获取到的计算机上。对于实际项目，通常会克隆存储库。 下载应用程序内容。您可以拉取整个项目，也可以将其下载为zip并将其解压缩出应用程序文件夹以开始使用。 提取后，使用您喜欢的代码编辑器打开项目，您应该看到 和 两个子目录 （ 和 ）。package.json``src``spec 生成应用的映像为了构建应用程序，需要使用 .Dockerfile 文本指令脚本，用于创建映像 介绍Dockerfile 创建Dockerfile，Dockerfile没有扩展名，该文件与包含以下内容的文件位于同一文件夹中。Dockerfile``package.json 12345678# syntax=docker/dockerfile:1FROM node:12-alpineRUN apk add --no-cache python2 g++ makeWORKDIR /appCOPY . .RUN yarn install --productionCMD [&quot;node&quot;, &quot;src/index.js&quot;]EXPOSE 3000 打开终端并转到包含的目录，使用命令生成映像 1$ docker build -t getting-started . 此命令使用 Dockerfile 生成新的映像。 下载映像后，在应用程序中复制并用于安装应用程序的依赖项。该指令指定从此映像启动容器时要运行的默认命令。yarn``CMD 最后，标志标记映像。只需将其视为最终映像的人类可读名称。由于命名了映像，因此可以在运行容器时引用该图像。-t getting-started 该命令的末尾 . (点) 指示 Docker 在当前目录中查找 。 启动应用容器现在有了一个映像，运行该应用程序。还记得前面的命令吗？docker run 运行刚刚创建映像的名称： 1$ docker run -dp 3000:3000 getting-started 几秒钟后，打开 Web 浏览器浏览 http://localhost:3000。应该会看到应用程序 您可以将项目标记为完整并删除项目。前端已成功将项目存储在后端。 管理容器快速查看 Docker 仪表板，会看到两个容器正在运行","link":"/2022/06/22/docker/"},{"title":"","text":"被动学习通过观看一些演示，我们不会学到更多，看了视频虽然明白，但是操作起来有时还没有明白。这是因为在看视频中还没有学会。 主动学习（重要）当练习（重要）时，学习经验会增长到50%75%当在驾驶学校学习理论时。学到了很多关于汽车和交通规则的知识。告诉了你怎么挂挡，加油门等，虽然你知道了这些，但当你第一次进入汽车，就会意识到所有这些知识仍然没有教会我们如何驾驶汽车。 思考当出现错误或者问题时，请问自己，这个问题是什么原因，是哪里产生的。如何解决。 学习资料的源头找对教程，找对老师很重要。垃圾教程，垃圾老师，可以把一个人毁掉。 没人能帮你，没人能教会你，只有你自己教会自己。只有你自己记忆。 当您遇到问题时，Google 和 YouTube 是您的朋友，因此您遇到的任何问题、问题或错误都可以直接粘贴到 Google 中，并通过论坛、博客等进行阅读，直到找到答案。 原文档是最好的资料 信息安全难点信息安全的难点在于它的广度太广，需要学习很多知识，挖掘某项漏洞时，你需要了解它，知道在如何运作的，怎么编写的，涉及的东西非常广，如果你那方面欠缺，那就会搞不来，需要花大量的时间去学习。 追逐理想，最初的心。 当你不理解一件事时，一定有一些信息你没掌握。 关注信息知识的源头，而不是二手知识。比如很多计算机知识的源自国外，那么我们就要去源头去学习。 一个人不可能什么都知道。在这种情况下，必须学习如何，以及需要的信息 信息安全领域是巨大的。任何一个人都不可能学到所有东西。举下面的例子： 你想成为一名程序员，有200多种不同的编程语言可以用来创建可以通过调试或逆向工程破解的应用程序。如果我们在100小时内学会了每一种编程语言，将花费20，000小时或2，500天（每天8小时），换句话说，将近七年的时间来学习所有这些编程语言。因此，我们花了七年时间学习所有这些语言，从未尝试调试或逆向工程创建的程序。再花七年时间学习调试和逆向工程。 只有通过大量的实践，才能成为一名优秀的渗透测试人员。 execute 执行者 边看、边操作、边记录 跳出框框思考：黑客的思维方式，在盒子外面。在渗透测试期间，必须关注许多不同的技术。没有目标，将迷失方向。我们已经知道什么？我们不知道什么？首先，必须失败。这是学习的一部分 工具要想扬帆于二进制海洋，除了水手般坚定的意志外，还需要有能够乘风破浪的坚船利器，定位精准的陀螺码表。没有工具的hacker如同没有枪的战士，子曰：工欲善其事，必先利其器。 持续的走路当不能给自己确认的时候，我们会从别人那里寻找它。如果其他人没有与我们一起走这条路，任何人都无法确认。为了清楚起见，让我们回到山区的例子。 现在假设你已经下了山，在你身后有一条漫长而艰苦的道路。你已经经过了几站和城镇，你遇到了另一个人，你问他你是否已经表现良好。 这个人永远无法告诉我们，如果没有和我们一起走过这条路，我们的表现是好是坏。即使这个人已经走了同样的道路，所有的因素都不一样，比如雨、雷暴、热、风等。 多年来一直在路上的人会知道它有多累，以及他们必须克服哪些障碍。只有通过上坡来获得高度。上坡总是令人筋疲力尽，我们可能会滑倒并再次滑下。这里至关重要的是不断前进。我们想要多快达到规定的高度完全取决于我们的雄心壮志。无论我们每天只走一步还是每天走十步，都只在持续时间中发挥作用。 尝试每天学习，即使只需要10分钟。 请看下面的数学示例，了解数字的差异： (1.00)365= 1.00 （1.01）365= 37.7 在这里，我们已经可以看到巨大的差异，它产生了多大的影响，即使我们每天只将性能提高1%。如果我们想记录我们的写作进度，回顾过去，看看我们已经走了多远，你可以创建两个列表。 列表 1在第一个列表中，你写下当前日期和你所知道的关于你想要的主题的所有知识，你所有的技能，估计等级为1-10。尽量使其尽可能详细。它越详细，差异就越清晰，以便您稍后看到。一旦您认为此列表已准备就绪，请将其放下或保存，以便即使在一年后您仍然可以访问它。 第2号清单第二个列表是连续编写的。这意味着，一旦您熟悉了某个主题，并且为自己学到了一些新东西，您就会将其添加到此列表中。尝试每天学习，即使只需要10分钟。如果您想更科学地做到这一点以获得更好的结果，请记录日历周。 我们将惊讶地看到我们在这段时间里取得的进展。最重要的是，我们清楚地看到，为什么除了我们自己之外，没有人能看出我们是否取得了良好的进展。 渗透学习的方式（1）以工具为线索 一个比较省事的学习目录：Kali Linux 学习思路，以Metasploit为例：遍历每个子目录，除了Exploit里面还有什么每个工具怎么用 原理是什么，涉及哪些知识，能否改进优化，能否发展、组合出新的功能？ （2）以专家为线索 你的技术方向上有哪些专家，他们的邮箱、主页、社交网络账号是什么 他们在该方向上有哪些作品，发表过哪些演讲跟踪关注，一个一个地学。 黑客攻击的基础，在正常逻辑业务流程上，通过构建程序认为正常数据，进行攻击。 懂得正常流程逻辑 如何提高效率?收集相关前人成果，避免无谓的重复劳动，能找到工具就不写代码，能用脚本语言写就不要用编译语言，把完美主义放在最终实现阶段，做好笔记并定期整理，遗忘会让所有的投入都白白浪费，多和同事交流，别人说一个工具的名字可能让你节约数小时，无论怎么提高效率，要成为专家，都需要大量的时间投入，作为人 ，成功都需要花费超乎想象的时间进行高强度的练习。观察一下你感兴趣的行业，研究一下别人的发展轨迹，你会逐渐发现，获取关键的技能和经验必须花费一定的时间。虽然具体情况会随着行业而变化，也会因人而异，但是它们都会让你认识到为了前进必须付出。你对需要学习的技能了解得越多，就越能为职业生涯做最佳决策，从而将你获得长期成功的可能性最大化。 一个成熟的逆向工程师，需要具备 ’ 快速学习全新编程语言的能力，以及在分析过程中遇到问题时持之以恒的毅力与耐心。 如何阅读理解文章1.简化删减2.组合联结 什么是黑客精神？好奇心，勇于探索，独立思考，用漂亮的方式解决问题，在解决问题中享受精神愉悦。使用计算机，有助于了解这个世界都不应该受限制，任何事物亲自尝试，信息都应该是免费的，判断一名黑客的能力应该看他的技术能力，而不是看他的学历，年龄或地位等其他标准，人活着的意义在于创造，黑客是激进的创造者，他们重构自我，不断迭代，通过提升做东西的人本身，最终达到做出好东西的目的。 什么是漏洞？如何去发现一个漏洞在正常的业务1，2，3，4中，黑客直接跳到最终结果，跳过中间流程。 黑客如何发现漏洞？阅读正常的逻辑代码，把整个代码逻辑流程弄清楚，然后发现那些输入点能被用户控制，然后加入自己的思想。 如何提高漏洞挖掘能力1.提高编码水平 2.提高阅读编码水平 3.熟悉各种原理机制","link":"/2022/06/22/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%9D%E8%80%83/"}],"tags":[],"categories":[]}