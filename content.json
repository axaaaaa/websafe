{"pages":[],"posts":[{"title":"","text":"Docker三步走1.生成映像 2.镜像生成容器 3.运行容器（docker run） 可以把映像成对象，对象生成方法等。 Docker 介绍 Docker就是一个虚拟机，里面的应用程序与主机相互隔离。 应用程序称为容器，容器无需依赖机上安装的内容。 可以共享容器，开发人员在本地编写代码，使用 Docker 容器与同事共享他们的工作。 可以在本地笔记本电脑、数据中心的物理机或虚拟机、云提供商或混合环境中运行。 Docker 体系结构 客户端&amp;服务器 Docker 客户端与 Docker 守护程序通信，后者负责构建、运行和分发 Docker 容器的繁重工作。 Docker 客户端和守护程序可以在同一系统上运行，也可以将 Docker 客户端连接到远程 Docker 守护程序。Docker 客户端和守护程序使用 REST API、UNIX 套接字或网络接口进行通信。另一个 Docker 客户端是 Docker Compose，它允许您使用由一组容器组成的应用程序。 Docker 守护程序 侦听 Docker API 请求并管理 Docker 对象：映像、容器、网络和卷。 守护程序还可以与其他守护程序通信以管理 Docker 服务。dockerd Docker 客户端Docker 用户与 Docker 交互的主要方式。客户端将命令发送到 ，后者会执行这些命令。该命令使用 Docker API。Docker 客户端可以与多个守护程序进行通信。docker``docker run``dockerd``docker Docker Desktop易于Mac 或 Windows 环境的安装应用程序，Docker Desktop 包括 Docker 守护程序 （）、Docker 客户端 （）、Docker Compose、Docker Content Trust、Kubernetes 和 Credential Helper。有关详细信息，请参阅 Docker Desktop。dockerd``docker Docker Hub 存储官方映像和私人的映像的地方 拉取映像命令1docker pull 推送映像命令1docker push Docker 对象映像映像是一个只读模板，其中包含有关创建 Docker 容器的说明。通常，一个映像基于另一个映像，并具有一些额外的自定义。例如，您可以构建一个基于该映像的映像，但会安装 Apache Web 服务器和应用程序，以及使应用程序运行所需的配置详细信息。ubuntu 您可以创建自己的映像，也可以只使用其他人创建并在注册表中发布的映像。若要生成自己的映像，请使用简单的语法创建一个 Dockerfile，用于定义创建映像并运行映像所需的步骤。Dockerfile 中的每条指令都会在映像中创建一个层。更改 Dockerfile 并重新生成映像时，只会重新生成已更改的层。与其他虚拟化技术相比，这是使映像如此轻巧、小巧和快速的部分原因。 容器容器是映像的可运行实例。您可以使用 Docker API 或 CLI 创建、启动、停止、移动或删除容器。可以将容器连接到一个或多个网络，将存储附加到该网络，甚至可以根据其当前状态创建新映像。 默认情况下，容器与其他容器及其主机相对隔离。您可以控制容器的网络、存储或其他底层子系统与其他容器或主机的隔离程度。 容器由其映像以及您在创建或启动容器时提供给它的任何配置选项定义。删除容器后，未存储在持久性存储中的任何对其状态所做的任何更改都将消失。 docker run 运行容器以交互方式附加到本地命令行会话，然后运行 。ubuntu``/bin/bash1$ docker run -i -t ubuntu /bin/bash 运行此命令时，将发生以下情况（假设您使用的是默认注册表配置）： 如果本地没有映像，Docker 会从配置的注册表中提取该映像，就像手动运行一样。ubuntu``docker pull ubuntu Docker 会创建一个新容器，就像手动运行命令一样。docker container create Docker 将读写文件系统分配给容器，作为其最后一层。这允许正在运行的容器在其本地文件系统中创建或修改文件和目录。 Docker 创建一个网络接口以将容器连接到默认网络，因为您没有指定任何网络选项。这包括为容器分配 IP 地址。默认情况下，容器可以使用主机的网络连接连接到外部网络。 Docker 启动容器并执行 。由于容器以交互方式运行并附加到终端（由于 and 标志），因此您可以在将输出记录到终端时使用键盘提供输入。/bin/bash``-i``-t 键入以终止命令时，容器将停止但不会被删除。您可以再次启动它或删除它。exit``/bin/bash 开始教程命令提示符或 bash运行命令： 1$ docker run -d -p 80:80 docker/getting-started -d 在后台运行容器 -p 80:80 将主机端口 80 映射到容器中的端口 80 docker/getting-started 要使用镜像 简洁写法： 1$ docker run -dp 80:80 docker/getting-started Docker 仪表板快速查看计算机上运行的容器。Docker Dashboard 适用于 Mac 和 Windows。它使您可以快速访问容器日志，让您在容器内获得一个shell，并允许您轻松管理容器生命周期（停止，删除等）。 操作手册 Docker 桌面手册 映像映像包含容器的文件系统，它包含运行应用程序所需的一切 、配置、脚本、二进制文件等。 映像还包含其他配置，如环境变量、要运行的默认命令和其他元数据。 映像生成容器 容器 容器是计算机上的沙盒进程，与主机上其他进程隔离。 这种隔离利用了内核命名空间和 cgroups，这些功能已经在 Linux 中存在了很长时间。 是映像可运行实例。您以使用 DockerAPI 或 CLI 创建、启动、停止、移动或删除容器。 可以在本地机器、虚拟机上运行或部署到云中。 可移植（可以在任何操作系统上运行） 容器彼此隔离，并运行自己的软件、二进制文件和配置 示例使用一个在 Node.js 中运行的待办事项管理器，界面 获取应用程序先将待办事项管理器程序源代码获取到的计算机上。对于实际项目，通常会克隆存储库。 下载应用程序内容。您可以拉取整个项目，也可以将其下载为zip并将其解压缩出应用程序文件夹以开始使用。 提取后，使用您喜欢的代码编辑器打开项目，您应该看到 和 两个子目录 （ 和 ）。package.json``src``spec 生成应用的映像为了构建应用程序，需要使用 .Dockerfile 文本指令脚本，用于创建映像 介绍Dockerfile 创建Dockerfile，Dockerfile没有扩展名，该文件与包含以下内容的文件位于同一文件夹中。Dockerfile``package.json 12345678# syntax=docker/dockerfile:1FROM node:12-alpineRUN apk add --no-cache python2 g++ makeWORKDIR /appCOPY . .RUN yarn install --productionCMD [&quot;node&quot;, &quot;src/index.js&quot;]EXPOSE 3000 打开终端并转到包含的目录，使用命令生成映像 1$ docker build -t getting-started . 此命令使用 Dockerfile 生成新的映像。 下载映像后，在应用程序中复制并用于安装应用程序的依赖项。该指令指定从此映像启动容器时要运行的默认命令。yarn``CMD 最后，标志标记映像。只需将其视为最终映像的人类可读名称。由于命名了映像，因此可以在运行容器时引用该图像。-t getting-started 该命令的末尾 . (点) 指示 Docker 在当前目录中查找 。 启动应用容器现在有了一个映像，运行该应用程序。还记得前面的命令吗？docker run 运行刚刚创建映像的名称： 1$ docker run -dp 3000:3000 getting-started 几秒钟后，打开 Web 浏览器浏览 http://localhost:3000。应该会看到应用程序 您可以将项目标记为完整并删除项目。前端已成功将项目存储在后端。 管理容器快速查看 Docker 仪表板，会看到两个容器正在运行","link":"/2022/06/22/docker/"}],"tags":[],"categories":[]}